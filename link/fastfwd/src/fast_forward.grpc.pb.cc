// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: fast_forward.proto

#include "fast_forward.pb.h"
#include "fast_forward.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace fastforward {

static const char* FastForward_method_names[] = {
  "/fastforward.FastForward/GetTsStream",
};

std::unique_ptr< FastForward::Stub> FastForward::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FastForward::Stub> stub(new FastForward::Stub(channel));
  return stub;
}

FastForward::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetTsStream_(FastForward_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::fastforward::FastForwardStream>* FastForward::Stub::GetTsStreamRaw(::grpc::ClientContext* context, const ::fastforward::FastForwardInfo& request) {
  return ::grpc::internal::ClientReaderFactory< ::fastforward::FastForwardStream>::Create(channel_.get(), rpcmethod_GetTsStream_, context, request);
}

::grpc::ClientAsyncReader< ::fastforward::FastForwardStream>* FastForward::Stub::AsyncGetTsStreamRaw(::grpc::ClientContext* context, const ::fastforward::FastForwardInfo& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fastforward::FastForwardStream>::Create(channel_.get(), cq, rpcmethod_GetTsStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::fastforward::FastForwardStream>* FastForward::Stub::PrepareAsyncGetTsStreamRaw(::grpc::ClientContext* context, const ::fastforward::FastForwardInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::fastforward::FastForwardStream>::Create(channel_.get(), cq, rpcmethod_GetTsStream_, context, request, false, nullptr);
}

FastForward::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FastForward_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FastForward::Service, ::fastforward::FastForwardInfo, ::fastforward::FastForwardStream>(
          std::mem_fn(&FastForward::Service::GetTsStream), this)));
}

FastForward::Service::~Service() {
}

::grpc::Status FastForward::Service::GetTsStream(::grpc::ServerContext* context, const ::fastforward::FastForwardInfo* request, ::grpc::ServerWriter< ::fastforward::FastForwardStream>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace fastforward

