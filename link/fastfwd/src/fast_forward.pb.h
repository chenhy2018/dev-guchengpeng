// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fast_forward.proto

#ifndef PROTOBUF_fast_5fforward_2eproto__INCLUDED
#define PROTOBUF_fast_5fforward_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_fast_5fforward_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFastForwardInfoImpl();
void InitDefaultsFastForwardInfo();
void InitDefaultsFastForwardStreamImpl();
void InitDefaultsFastForwardStream();
inline void InitDefaults() {
  InitDefaultsFastForwardInfo();
  InitDefaultsFastForwardStream();
}
}  // namespace protobuf_fast_5fforward_2eproto
namespace fastforward {
class FastForwardInfo;
class FastForwardInfoDefaultTypeInternal;
extern FastForwardInfoDefaultTypeInternal _FastForwardInfo_default_instance_;
class FastForwardStream;
class FastForwardStreamDefaultTypeInternal;
extern FastForwardStreamDefaultTypeInternal _FastForwardStream_default_instance_;
}  // namespace fastforward
namespace fastforward {

// ===================================================================

class FastForwardInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fastforward.FastForwardInfo) */ {
 public:
  FastForwardInfo();
  virtual ~FastForwardInfo();

  FastForwardInfo(const FastForwardInfo& from);

  inline FastForwardInfo& operator=(const FastForwardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FastForwardInfo(FastForwardInfo&& from) noexcept
    : FastForwardInfo() {
    *this = ::std::move(from);
  }

  inline FastForwardInfo& operator=(FastForwardInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FastForwardInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastForwardInfo* internal_default_instance() {
    return reinterpret_cast<const FastForwardInfo*>(
               &_FastForwardInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FastForwardInfo* other);
  friend void swap(FastForwardInfo& a, FastForwardInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FastForwardInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  FastForwardInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FastForwardInfo& from);
  void MergeFrom(const FastForwardInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FastForwardInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string url = 1;
  void clear_url();
  static const int kUrlFieldNumber = 1;
  const ::std::string& url() const;
  void set_url(const ::std::string& value);
  #if LANG_CXX11
  void set_url(::std::string&& value);
  #endif
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  ::std::string* mutable_url();
  ::std::string* release_url();
  void set_allocated_url(::std::string* url);

  // string fmt = 3;
  void clear_fmt();
  static const int kFmtFieldNumber = 3;
  const ::std::string& fmt() const;
  void set_fmt(const ::std::string& value);
  #if LANG_CXX11
  void set_fmt(::std::string&& value);
  #endif
  void set_fmt(const char* value);
  void set_fmt(const char* value, size_t size);
  ::std::string* mutable_fmt();
  ::std::string* release_fmt();
  void set_allocated_fmt(::std::string* fmt);

  // int32 speed = 2;
  void clear_speed();
  static const int kSpeedFieldNumber = 2;
  ::google::protobuf::int32 speed() const;
  void set_speed(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fastforward.FastForwardInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr url_;
  ::google::protobuf::internal::ArenaStringPtr fmt_;
  ::google::protobuf::int32 speed_;
  mutable int _cached_size_;
  friend struct ::protobuf_fast_5fforward_2eproto::TableStruct;
  friend void ::protobuf_fast_5fforward_2eproto::InitDefaultsFastForwardInfoImpl();
};
// -------------------------------------------------------------------

class FastForwardStream : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fastforward.FastForwardStream) */ {
 public:
  FastForwardStream();
  virtual ~FastForwardStream();

  FastForwardStream(const FastForwardStream& from);

  inline FastForwardStream& operator=(const FastForwardStream& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FastForwardStream(FastForwardStream&& from) noexcept
    : FastForwardStream() {
    *this = ::std::move(from);
  }

  inline FastForwardStream& operator=(FastForwardStream&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FastForwardStream& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FastForwardStream* internal_default_instance() {
    return reinterpret_cast<const FastForwardStream*>(
               &_FastForwardStream_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(FastForwardStream* other);
  friend void swap(FastForwardStream& a, FastForwardStream& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FastForwardStream* New() const PROTOBUF_FINAL { return New(NULL); }

  FastForwardStream* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FastForwardStream& from);
  void MergeFrom(const FastForwardStream& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FastForwardStream* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes stream = 1;
  void clear_stream();
  static const int kStreamFieldNumber = 1;
  const ::std::string& stream() const;
  void set_stream(const ::std::string& value);
  #if LANG_CXX11
  void set_stream(::std::string&& value);
  #endif
  void set_stream(const char* value);
  void set_stream(const void* value, size_t size);
  ::std::string* mutable_stream();
  ::std::string* release_stream();
  void set_allocated_stream(::std::string* stream);

  // @@protoc_insertion_point(class_scope:fastforward.FastForwardStream)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stream_;
  mutable int _cached_size_;
  friend struct ::protobuf_fast_5fforward_2eproto::TableStruct;
  friend void ::protobuf_fast_5fforward_2eproto::InitDefaultsFastForwardStreamImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FastForwardInfo

// string url = 1;
inline void FastForwardInfo::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FastForwardInfo::url() const {
  // @@protoc_insertion_point(field_get:fastforward.FastForwardInfo.url)
  return url_.GetNoArena();
}
inline void FastForwardInfo::set_url(const ::std::string& value) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fastforward.FastForwardInfo.url)
}
#if LANG_CXX11
inline void FastForwardInfo::set_url(::std::string&& value) {
  
  url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fastforward.FastForwardInfo.url)
}
#endif
inline void FastForwardInfo::set_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fastforward.FastForwardInfo.url)
}
inline void FastForwardInfo::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fastforward.FastForwardInfo.url)
}
inline ::std::string* FastForwardInfo::mutable_url() {
  
  // @@protoc_insertion_point(field_mutable:fastforward.FastForwardInfo.url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FastForwardInfo::release_url() {
  // @@protoc_insertion_point(field_release:fastforward.FastForwardInfo.url)
  
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FastForwardInfo::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:fastforward.FastForwardInfo.url)
}

// int32 speed = 2;
inline void FastForwardInfo::clear_speed() {
  speed_ = 0;
}
inline ::google::protobuf::int32 FastForwardInfo::speed() const {
  // @@protoc_insertion_point(field_get:fastforward.FastForwardInfo.speed)
  return speed_;
}
inline void FastForwardInfo::set_speed(::google::protobuf::int32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:fastforward.FastForwardInfo.speed)
}

// string fmt = 3;
inline void FastForwardInfo::clear_fmt() {
  fmt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FastForwardInfo::fmt() const {
  // @@protoc_insertion_point(field_get:fastforward.FastForwardInfo.fmt)
  return fmt_.GetNoArena();
}
inline void FastForwardInfo::set_fmt(const ::std::string& value) {
  
  fmt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fastforward.FastForwardInfo.fmt)
}
#if LANG_CXX11
inline void FastForwardInfo::set_fmt(::std::string&& value) {
  
  fmt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fastforward.FastForwardInfo.fmt)
}
#endif
inline void FastForwardInfo::set_fmt(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fmt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fastforward.FastForwardInfo.fmt)
}
inline void FastForwardInfo::set_fmt(const char* value, size_t size) {
  
  fmt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fastforward.FastForwardInfo.fmt)
}
inline ::std::string* FastForwardInfo::mutable_fmt() {
  
  // @@protoc_insertion_point(field_mutable:fastforward.FastForwardInfo.fmt)
  return fmt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FastForwardInfo::release_fmt() {
  // @@protoc_insertion_point(field_release:fastforward.FastForwardInfo.fmt)
  
  return fmt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FastForwardInfo::set_allocated_fmt(::std::string* fmt) {
  if (fmt != NULL) {
    
  } else {
    
  }
  fmt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fmt);
  // @@protoc_insertion_point(field_set_allocated:fastforward.FastForwardInfo.fmt)
}

// -------------------------------------------------------------------

// FastForwardStream

// bytes stream = 1;
inline void FastForwardStream::clear_stream() {
  stream_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FastForwardStream::stream() const {
  // @@protoc_insertion_point(field_get:fastforward.FastForwardStream.stream)
  return stream_.GetNoArena();
}
inline void FastForwardStream::set_stream(const ::std::string& value) {
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fastforward.FastForwardStream.stream)
}
#if LANG_CXX11
inline void FastForwardStream::set_stream(::std::string&& value) {
  
  stream_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fastforward.FastForwardStream.stream)
}
#endif
inline void FastForwardStream::set_stream(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fastforward.FastForwardStream.stream)
}
inline void FastForwardStream::set_stream(const void* value, size_t size) {
  
  stream_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fastforward.FastForwardStream.stream)
}
inline ::std::string* FastForwardStream::mutable_stream() {
  
  // @@protoc_insertion_point(field_mutable:fastforward.FastForwardStream.stream)
  return stream_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FastForwardStream::release_stream() {
  // @@protoc_insertion_point(field_release:fastforward.FastForwardStream.stream)
  
  return stream_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FastForwardStream::set_allocated_stream(::std::string* stream) {
  if (stream != NULL) {
    
  } else {
    
  }
  stream_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stream);
  // @@protoc_insertion_point(field_set_allocated:fastforward.FastForwardStream.stream)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fastforward

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fast_5fforward_2eproto__INCLUDED
