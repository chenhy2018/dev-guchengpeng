package pay

import (
	"qbox.us/zone"
)

type Product string

const (
	PRODUCT_NIL          Product = "nil"
	PRODUCT_STORAGE      Product = "storage"
	PRODUCT_MPS          Product = "mps"
	PRODUCT_KODO         Product = "kodo"
	PRODUCT_DISTRIBUTION Product = "distribution"
)

func (r Product) ToString() string {
	return string(r)
}

var ALLPRODUCTS = []Product{
	PRODUCT_STORAGE,
	PRODUCT_COLD_STORAGE,
	PRODUCT_MPS,
	PRODUCT_MARKET,
	PRODUCT_EVM,
	PRODUCT_UFOP,
	PRODUCT_FUSION,
	PRODUCT_PILI,
	PRODUCT_KODO,
	PRODUCT_DISTRIBUTION,
}

func (r Product) Groups() []Group {
	groups := make([]Group, 0)
	switch r {
	case PRODUCT_STORAGE:
		groups = []Group{GROUP_COMMON, GROUP_SPACE, GROUP_TRANSFER, GROUP_API}
	case PRODUCT_COLD_STORAGE:
		groups = []Group{GROUP_COLD_STORAGE}
	case PRODUCT_MPS:
		groups = []Group{GROUP_MPS}
	case PRODUCT_MARKET:
		groups = []Group{GROUP_MARKET_TUPU, GROUP_MARKET_TUPU_ADV, GROUP_MARKET_TUPU_VIDEO, GROUP_MARKET_TUPU_TERROR, GROUP_MARKET_YIFANG_CONVERT, GROUP_MARKET_FACEPP, GROUP_MARKET_SEQUICKIMAGE, GROUP_MARKET_TUSDK, GROUP_MARKET_DG, GROUP_MARKET_YUEMIAN, GROUP_MARKET_NETEASE}
	case PRODUCT_EVM:
		groups = []Group{GROUP_EVM_COMPUTE, GROUP_EVM_NETWORK, GROUP_EVM_VOLUME, GROUP_EVM_SNAPSHOT, GROUP_EVM_LISTENER}
	case PRODUCT_UFOP:
		groups = []Group{GROUP_UFOP_MACHINE}
	case PRODUCT_FUSION:
		groups = []Group{GROUP_FUSION_TRANSFER}
	case PRODUCT_PILI:
		groups = []Group{GROUP_PILI_TRANSFER}
	}

	return groups
}

type Group string

const (
	GROUP_NIL      Group = "nil"
	GROUP_COMMON   Group = "common" // 此group不删除, 兼容老的账单
	GROUP_SPACE    Group = "space"
	GROUP_TRANSFER Group = "transfer"
	GROUP_API      Group = "api"
	GROUP_MPS      Group = "mps"
)

var GroupProductM = map[Group]Product{
	GROUP_COMMON:                PRODUCT_STORAGE,
	GROUP_SPACE:                 PRODUCT_STORAGE,
	GROUP_TRANSFER:              PRODUCT_STORAGE,
	GROUP_API:                   PRODUCT_STORAGE,
	GROUP_COLD_STORAGE:          PRODUCT_COLD_STORAGE,
	GROUP_MPS:                   PRODUCT_MPS,
	GROUP_EVM_COMPUTE:           PRODUCT_EVM,
	GROUP_EVM_NETWORK:           PRODUCT_EVM,
	GROUP_EVM_VOLUME:            PRODUCT_EVM,
	GROUP_EVM_SNAPSHOT:          PRODUCT_EVM,
	GROUP_EVM_LISTENER:          PRODUCT_EVM,
	GROUP_MARKET_TUPU:           PRODUCT_MARKET,
	GROUP_MARKET_TUPU_ADV:       PRODUCT_MARKET,
	GROUP_MARKET_TUPU_VIDEO:     PRODUCT_MARKET,
	GROUP_MARKET_TUPU_TERROR:    PRODUCT_MARKET,
	GROUP_MARKET_YIFANG_CONVERT: PRODUCT_MARKET,
	GROUP_MARKET_FACEPP:         PRODUCT_MARKET,
	GROUP_MARKET_SEQUICKIMAGE:   PRODUCT_MARKET,
	GROUP_MARKET_TUSDK:          PRODUCT_MARKET,
	GROUP_MARKET_DG:             PRODUCT_MARKET,
	GROUP_MARKET_YUEMIAN:        PRODUCT_MARKET,
	GROUP_MARKET_NETEASE:        PRODUCT_MARKET,
	GROUP_UFOP_MACHINE:          PRODUCT_UFOP,
	GROUP_FUSION_TRANSFER:       PRODUCT_FUSION,
	GROUP_PILI_TRANSFER:         PRODUCT_PILI,
}

var GroupNameM = map[Group]string{
	GROUP_SPACE:                 "空间",
	GROUP_TRANSFER:              "流量",
	GROUP_API:                   "请求数",
	GROUP_COLD_STORAGE:          "冷存储",
	GROUP_MPS:                   "多媒体处理",
	GROUP_EVM_COMPUTE:           "EVM主机",
	GROUP_EVM_NETWORK:           "EVM公网带宽",
	GROUP_EVM_VOLUME:            "EVM硬盘",
	GROUP_EVM_SNAPSHOT:          "EVM镜像",
	GROUP_EVM_LISTENER:          "EVM监听器",
	GROUP_MARKET_TUPU:           "TUPU鉴黄",
	GROUP_MARKET_TUPU_ADV:       "TUPU广告",
	GROUP_MARKET_TUPU_VIDEO:     "TUPU视频鉴黄",
	GROUP_MARKET_TUPU_TERROR:    "TUPU鉴暴恐",
	GROUP_MARKET_YIFANG_CONVERT: "亿方云文档转换",
	GROUP_MARKET_FACEPP:         "Face++",
	GROUP_MARKET_SEQUICKIMAGE:   "大图极速浏览",
	GROUP_MARKET_TUSDK:          "TuSDK",
	GROUP_MARKET_DG:             "达观数据",
	GROUP_MARKET_YUEMIAN:        "阅面",
	GROUP_MARKET_NETEASE:        "网易易盾",
	GROUP_UFOP_MACHINE:          "UFOP主机",
	GROUP_FUSION_TRANSFER:       "CDN流量",
	GROUP_PILI_TRANSFER:         "PILI流量",
}

func (r Group) Product() Product {
	if p, ok := GroupProductM[r]; ok {
		return p
	}
	return PRODUCT_NIL
}

func (r Group) ToString() string {
	return string(r)
}

func (r Group) Name() string {
	if s, ok := GroupNameM[r]; ok {
		return s
	}
	return "Unknown"
}

var ALLGROUPS = []Group{
	// BS
	GROUP_SPACE,
	GROUP_TRANSFER,
	GROUP_API,
	GROUP_MPS,

	// Cold storage
	GROUP_COLD_STORAGE,

	// EVM
	GROUP_EVM_COMPUTE,
	GROUP_EVM_NETWORK,
	GROUP_EVM_SNAPSHOT,
	GROUP_EVM_VOLUME,
	GROUP_EVM_LISTENER,

	// Market
	GROUP_MARKET_TUPU,
	GROUP_MARKET_TUPU_ADV,
	GROUP_MARKET_TUPU_VIDEO,
	GROUP_MARKET_TUPU_TERROR,
	GROUP_MARKET_YIFANG_CONVERT,
	GROUP_MARKET_FACEPP,
	GROUP_MARKET_SEQUICKIMAGE,
	GROUP_MARKET_TUSDK,
	GROUP_MARKET_DG,
	GROUP_MARKET_YUEMIAN,
	GROUP_MARKET_NETEASE,

	// UFOP
	GROUP_UFOP_MACHINE,

	// Fusion
	GROUP_FUSION_TRANSFER,

	// PILI
	GROUP_PILI_TRANSFER,
}

func (r Group) Items() []Item {
	items := make([]Item, 0)
	switch r {
	case GROUP_SPACE:
		items = []Item{SPACE, SPACE_BC}
	case GROUP_TRANSFER:
		items = []Item{TRANSFER, TRANSFER_OV, HTTPSTRANSFER, HTTPSTRANSFER_OV}
	case GROUP_API:
		items = []Item{APIGET, APIPUT}
	case GROUP_COLD_STORAGE:
		items = []Item{CS_STORAGE, CS_ADDITION, CS_EGRESS}
	case GROUP_MPS:
		items = []Item{MPS_SD, MPS_HD, MPS_AUDIO, MPS_IMAGEAVE, MPS_VFRAME, MPS_AVINFO, MPS_PM3U8,
			MPS_AVCONCAT, MPS_SD240, MPS_SD480}
	case GROUP_MARKET_TUPU:
		items = []Item{MARKET_TUPU_NROP_CERTAIN, MARKET_TUPU_NROP_DEPEND}
	case GROUP_MARKET_TUPU_ADV:
		items = []Item{MARKET_TUPU_ADV_CERTAIN, MARKET_TUPU_ADV_DEPEND, MARKET_TUPU_ADV_PLUS_CERTAIN, MARKET_TUPU_ADV_PLUS_DEPEND}
	case GROUP_MARKET_TUPU_VIDEO:
		items = []Item{MARKET_TUPU_VIDEO_CERTAIN, MARKET_TUPU_VIDEO_DEPEND, MARKET_TUPU_VIDEO_UNIFIED}
	case GROUP_MARKET_TUPU_TERROR:
		items = []Item{MARKET_TUPU_TERROR_CERTAIN, MARKET_TUPU_TERROR_DEPEND}
	case GROUP_MARKET_YIFANG_CONVERT:
		items = []Item{MARKET_YIFANG_CONVERT_EXCEL, MARKET_YIFANG_CONVERT_PPT, MARKET_YIFANG_CONVERT_WORD}
	case GROUP_MARKET_FACEPP:
		items = []Item{MARKET_FACEPP_FACECROP2}
	case GROUP_MARKET_SEQUICKIMAGE:
		items = []Item{MARKET_SEQUICKIMAGE_CONVERT}
	case GROUP_MARKET_TUSDK:
		items = []Item{MARKET_TUSDK_FACE_DETECTION, MARKET_TUSDK_FACE_LANDMARK}
	case GROUP_MARKET_DG:
		items = []Item{MARKET_DG_CONTENT_AUDIT_V5}
	case GROUP_MARKET_NETEASE:
		items = []Item{MARKET_NETEASE_YDTEXT}
	case GROUP_UFOP_MACHINE:
		items = []Item{UFOP_MACHINE_M0C1, UFOP_MACHINE_M1C2, UFOP_MACHINE_M2C4, UFOP_MACHINE_M4C8, UFOP_MACHINE_M8C12, UFOP_MACHINE_G1M16C8}
	case GROUP_EVM_COMPUTE:
		items = []Item{EVM_COMPUTE_COMPUTE_2, EVM_COMPUTE_COMPUTE_4, EVM_COMPUTE_COMPUTE_8, EVM_COMPUTE_COMPUTE_12,
			EVM_COMPUTE_MEMORY_1, EVM_COMPUTE_MEMORY_2, EVM_COMPUTE_MEMORY_4, EVM_COMPUTE_MEMORY_8, EVM_COMPUTE_MEMORY_12, EVM_COMPUTE_MEMORY_16,
			EVM_COMPUTE_STD_1, EVM_COMPUTE_STD_2, EVM_COMPUTE_STD_4, EVM_COMPUTE_STD_8, EVM_COMPUTE_STD_12, EVM_COMPUTE_STD_16,
			EVM_COMPUTE_MICRO_1, EVM_COMPUTE_MICRO_0, EVM_COMPUTE_COMPUTE_2_MONTH, EVM_COMPUTE_COMPUTE_4_MONTH, EVM_COMPUTE_COMPUTE_8_MONTH,
			EVM_COMPUTE_COMPUTE_12_MONTH, EVM_COMPUTE_MEMORY_1_MONTH, EVM_COMPUTE_MEMORY_2_MONTH, EVM_COMPUTE_MEMORY_4_MONTH, EVM_COMPUTE_MEMORY_8_MONTH,
			EVM_COMPUTE_MEMORY_12_MONTH, EVM_COMPUTE_MEMORY_16_MONTH, EVM_COMPUTE_STD_1_MONTH, EVM_COMPUTE_STD_2_MONTH, EVM_COMPUTE_STD_4_MONTH, EVM_COMPUTE_STD_8_MONTH,
			EVM_COMPUTE_STD_12_MONTH, EVM_COMPUTE_STD_16_MONTH, EVM_COMPUTE_MICRO_1_MONTH, EVM_COMPUTE_MICRO_0_MONTH, EVM_COMPUTE_COMPUTE_2_YEAR,
			EVM_COMPUTE_COMPUTE_4_YEAR, EVM_COMPUTE_COMPUTE_8_YEAR, EVM_COMPUTE_COMPUTE_12_YEAR, EVM_COMPUTE_MEMORY_1_YEAR, EVM_COMPUTE_MEMORY_2_YEAR,
			EVM_COMPUTE_MEMORY_4_YEAR, EVM_COMPUTE_MEMORY_8_YEAR, EVM_COMPUTE_MEMORY_12_YEAR, EVM_COMPUTE_MEMORY_16_YEAR, EVM_COMPUTE_STD_1_YEAR, EVM_COMPUTE_STD_2_YEAR, EVM_COMPUTE_STD_4_YEAR,
			EVM_COMPUTE_STD_8_YEAR, EVM_COMPUTE_STD_12_YEAR, EVM_COMPUTE_STD_16_YEAR, EVM_COMPUTE_MICRO_1_YEAR, EVM_COMPUTE_MICRO_0_YEAR}
	case GROUP_EVM_NETWORK:
		items = []Item{EVM_NETWORK_BANDWIDTH_1, EVM_NETWORK_BANDWIDTH_2, EVM_NETWORK_BANDWIDTH_3, EVM_NETWORK_BANDWIDTH_4, EVM_NETWORK_BANDWIDTH_5, EVM_NETWORK_BANDWIDTH_6,
			EVM_NETWORK_BANDWIDTH_1_MONTH, EVM_NETWORK_BANDWIDTH_2_MONTH, EVM_NETWORK_BANDWIDTH_3_MONTH, EVM_NETWORK_BANDWIDTH_4_MONTH, EVM_NETWORK_BANDWIDTH_5_MONTH, EVM_NETWORK_BANDWIDTH_6_MONTH,
			EVM_NETWORK_BANDWIDTH_1_YEAR, EVM_NETWORK_BANDWIDTH_2_YEAR, EVM_NETWORK_BANDWIDTH_3_YEAR, EVM_NETWORK_BANDWIDTH_4_YEAR, EVM_NETWORK_BANDWIDTH_5_YEAR, EVM_NETWORK_BANDWIDTH_6_YEAR}
	case GROUP_EVM_VOLUME:
		items = []Item{EVM_VOLUME_QUICK, EVM_VOLUME_QUICK_MONTH, EVM_VOLUME_QUICK_YEAR, EVM_VOLUME_CAPACIOUS, EVM_VOLUME_CAPACIOUS_MONTH, EVM_VOLUME_CAPACIOUS_YEAR}
	case GROUP_EVM_SNAPSHOT:
		items = []Item{EVM_SNAPSHOT_VOLUME, EVM_SNAPSHOT_VOLUME_MONTH, EVM_SNAPSHOT_VOLUME_YEAR}
	case GROUP_EVM_LISTENER:
		items = []Item{EVM_LISTENER_5K, EVM_LISTENER_10K, EVM_LISTENER_20K, EVM_LISTENER_40K}
	case GROUP_FUSION_TRANSFER:
		items = []Item{FUSION_TRANSFER_TINY, FUSION_TRANSFER_DOWN, FUSION_TRANSFER_VOD}
	case GROUP_PILI_TRANSFER:
		items = []Item{PILI_TRANSFER_DOWN}
	}
	return items
}

type Item string

const (
	ITEM_NIL Item = "nil"

	SPACE    Item = "space"
	TRANSFER Item = "transfer" // 国内 HTTP 回源 + CDN
	APIGET   Item = "api_get"
	APIPUT   Item = "api_put"

	//temp item
	SPACE_BC    Item = "space_bc"
	TRANSFER_BC Item = "transfer_bc"
	APIGET_BC   Item = "api_get_bc"
	APIPUT_BC   Item = "api_put_bc"

	HTTPSAPIGET      Item = "https_api_get"     // https api get
	TRANSFER_OV      Item = "transfer_ov"       // 海外http  老用户不区分区域
	HTTPSTRANSFER    Item = "https_transfer"    // https transfer
	HTTPSTRANSFER_OV Item = "https_transfer_ov" // https 海外cdn  老用户不区分区域

	TRANSFER_NO_PROTOCOL    Item = "transfer_no_protocol"    // 不区分协议计费-国内 不区分区域
	TRANSFER_OV_NO_PROTOCOL Item = "transfer_ov_no_protocol" // 不区分协议计费-海外 不区分区域

	TRANSFER_ORIGIN  Item = "transfer_origin"  // 国内 HTTP 回源
	TRANSFER_CDN     Item = "transfer_cdn"     // 国内 HTTP CDN
	TRANSFER_BLOB_UP Item = "transfer_blob_up" // HTTP 源站上传

	MPS_SD       Item = "mps:sd"       // 普清转码
	MPS_HD       Item = "mps:hd"       // 高清转码
	MPS_AUDIO    Item = "mps:audio"    // 音频
	MPS_IMAGEAVE Item = "mps:imageAve" //mps apicall
	MPS_VFRAME   Item = "mps:vframe"
	MPS_AVINFO   Item = "mps:avinfo"
	MPS_PM3U8    Item = "mps:pm3u8"
	MPS_AVCONCAT Item = "mps:avconcat"
	MPS_SD240    Item = "mps:sd240"
	MPS_SD480    Item = "mps:sd480"

	V2_SPACE_LINE      Item = "v2_space_line"
	LF_APIGET          Item = "lf_api_get"
	LF_APIPUT          Item = "lf_api_put"
	LF_TRANSFER_ORIGIN Item = "lf_transfer_origin"
	LF_GET_BACK        Item = "lf_get_back"
	LF_PREDEL          Item = "lf_predel"

	API_CONVERT_TYPE       Item = "rs_convert_type"
	CROSS_REGIONAL_SYNC    Item = "cross_regional_sync"
	CROSS_REGIONAL_SYNC_OV Item = "cross_regional_sync_ov"

	//以下三项区分区域
	FUSION_TRANSFER_HTTP_OV  Item = "fusion:transfer:http:ov"
	FUSION_TRANSFER_HTTPS_OV Item = "fusion:transfer:https:ov"
	FUSION_TRANSFER_ALL_OV   Item = "fusion:transfer:all:ov" // 不区分协议计费
)

func (r Item) ToString() string {
	return string(r)
}

func (r Item) Group() Group {
	switch r {
	case SPACE, SPACE_BC, V2_SPACE_LINE, LF_PREDEL, LF_GET_BACK:
		return GROUP_SPACE
	case CS_STORAGE, CS_ADDITION, CS_EGRESS:
		return GROUP_COLD_STORAGE
	case TRANSFER, TRANSFER_OV, HTTPSTRANSFER, HTTPSTRANSFER_OV, TRANSFER_ORIGIN, TRANSFER_CDN, TRANSFER_BLOB_UP, TRANSFER_NO_PROTOCOL, TRANSFER_OV_NO_PROTOCOL, LF_TRANSFER_ORIGIN, CROSS_REGIONAL_SYNC, CROSS_REGIONAL_SYNC_OV, FUSION_TRANSFER_ALL_OV, FUSION_TRANSFER_HTTP_OV, FUSION_TRANSFER_HTTPS_OV:
		return GROUP_TRANSFER
	case APIGET, APIPUT, LF_APIGET, LF_APIPUT, API_CONVERT_TYPE:
		return GROUP_API
	case MPS_SD, MPS_HD, MPS_AUDIO, MPS_IMAGEAVE, MPS_VFRAME, MPS_AVINFO, MPS_PM3U8,
		MPS_AVCONCAT, MPS_SD240, MPS_SD480:
		return GROUP_MPS
	case MARKET_TUPU_NROP_CERTAIN, MARKET_TUPU_NROP_DEPEND:
		return GROUP_MARKET_TUPU
	case MARKET_TUPU_ADV_CERTAIN, MARKET_TUPU_ADV_DEPEND, MARKET_TUPU_ADV_PLUS_CERTAIN, MARKET_TUPU_ADV_PLUS_DEPEND:
		return GROUP_MARKET_TUPU_ADV
	case MARKET_TUPU_VIDEO_CERTAIN, MARKET_TUPU_VIDEO_DEPEND, MARKET_TUPU_VIDEO_UNIFIED:
		return GROUP_MARKET_TUPU_VIDEO
	case MARKET_TUPU_TERROR_CERTAIN, MARKET_TUPU_TERROR_DEPEND:
		return GROUP_MARKET_TUPU_TERROR
	case MARKET_YIFANG_CONVERT_EXCEL, MARKET_YIFANG_CONVERT_PPT, MARKET_YIFANG_CONVERT_WORD:
		return GROUP_MARKET_YIFANG_CONVERT
	case MARKET_FACEPP_FACECROP2:
		return GROUP_MARKET_FACEPP
	case MARKET_SEQUICKIMAGE_CONVERT:
		return GROUP_MARKET_SEQUICKIMAGE
	case MARKET_TUSDK_FACE_DETECTION, MARKET_TUSDK_FACE_LANDMARK:
		return GROUP_MARKET_TUSDK
	case MARKET_DG_CONTENT_AUDIT_V5:
		return GROUP_MARKET_DG
	case MARKET_YUEMIAN_FACE_VERIFICATION, MARKET_YUEMIAN_FACE_LANDMARKS, MARKET_YUEMIAN_FACE_ATTRIBUTES:
		return GROUP_MARKET_YUEMIAN
	case MARKET_NETEASE_YDTEXT:
		return GROUP_MARKET_NETEASE
	case UFOP_MACHINE_M0C1, UFOP_MACHINE_M1C2, UFOP_MACHINE_M2C4, UFOP_MACHINE_M4C8, UFOP_MACHINE_M8C12, UFOP_MACHINE_G1M16C8:
		return GROUP_UFOP_MACHINE
	case EVM_COMPUTE_COMPUTE_2, EVM_COMPUTE_COMPUTE_4, EVM_COMPUTE_COMPUTE_8, EVM_COMPUTE_COMPUTE_12,
		EVM_COMPUTE_MEMORY_1, EVM_COMPUTE_MEMORY_2, EVM_COMPUTE_MEMORY_4, EVM_COMPUTE_MEMORY_8, EVM_COMPUTE_MEMORY_12, EVM_COMPUTE_MEMORY_16,
		EVM_COMPUTE_STD_1, EVM_COMPUTE_STD_2, EVM_COMPUTE_STD_4, EVM_COMPUTE_STD_8, EVM_COMPUTE_STD_12, EVM_COMPUTE_STD_16,
		EVM_COMPUTE_MICRO_1, EVM_COMPUTE_MICRO_0, EVM_COMPUTE_COMPUTE_2_MONTH, EVM_COMPUTE_COMPUTE_4_MONTH, EVM_COMPUTE_COMPUTE_8_MONTH,
		EVM_COMPUTE_COMPUTE_12_MONTH, EVM_COMPUTE_MEMORY_1_MONTH, EVM_COMPUTE_MEMORY_2_MONTH, EVM_COMPUTE_MEMORY_4_MONTH, EVM_COMPUTE_MEMORY_8_MONTH,
		EVM_COMPUTE_MEMORY_16_MONTH, EVM_COMPUTE_MEMORY_12_MONTH, EVM_COMPUTE_STD_1_MONTH, EVM_COMPUTE_STD_2_MONTH, EVM_COMPUTE_STD_4_MONTH, EVM_COMPUTE_STD_8_MONTH,
		EVM_COMPUTE_STD_12_MONTH, EVM_COMPUTE_STD_16_MONTH, EVM_COMPUTE_MICRO_1_MONTH, EVM_COMPUTE_MICRO_0_MONTH, EVM_COMPUTE_COMPUTE_2_YEAR,
		EVM_COMPUTE_COMPUTE_4_YEAR, EVM_COMPUTE_COMPUTE_8_YEAR, EVM_COMPUTE_COMPUTE_12_YEAR, EVM_COMPUTE_MEMORY_1_YEAR, EVM_COMPUTE_MEMORY_2_YEAR,
		EVM_COMPUTE_MEMORY_4_YEAR, EVM_COMPUTE_MEMORY_8_YEAR, EVM_COMPUTE_MEMORY_12_YEAR, EVM_COMPUTE_MEMORY_16_YEAR, EVM_COMPUTE_STD_1_YEAR, EVM_COMPUTE_STD_2_YEAR, EVM_COMPUTE_STD_4_YEAR,
		EVM_COMPUTE_STD_8_YEAR, EVM_COMPUTE_STD_12_YEAR, EVM_COMPUTE_STD_16_YEAR, EVM_COMPUTE_MICRO_1_YEAR, EVM_COMPUTE_MICRO_0_YEAR,
		EVM_COMPUTE_12C12G_40GB, EVM_COMPUTE_12C24G_40GB, EVM_COMPUTE_12C48G_40GB, EVM_COMPUTE_16C32G_40GB, EVM_COMPUTE_16C64G_40GB, EVM_COMPUTE_1C1G_40GB, EVM_COMPUTE_1C2G_40GB, EVM_COMPUTE_1C4G_40GB,
		EVM_COMPUTE_24C48G_20GB, EVM_COMPUTE_24C48G_40GB, EVM_COMPUTE_2C2G_40GB, EVM_COMPUTE_2C4G_40GB, EVM_COMPUTE_2C8G_40GB, EVM_COMPUTE_32C64G_20GB, EVM_COMPUTE_32C64G_40GB, EVM_COMPUTE_4C16G_40GB, EVM_COMPUTE_4C4G_40GB, EVM_COMPUTE_4C8G_40GB, EVM_COMPUTE_8C16G_40GB, EVM_COMPUTE_8C32G_40GB, EVM_COMPUTE_8C8G_40GB, EVM_COMPUTE_12C12G_40GB_MONTH,
		EVM_COMPUTE_12C24G_40GB_MONTH, EVM_COMPUTE_12C48G_40GB_MONTH, EVM_COMPUTE_16C32G_40GB_MONTH, EVM_COMPUTE_16C64G_40GB_MONTH, EVM_COMPUTE_1C1G_40GB_MONTH,
		EVM_COMPUTE_1C2G_40GB_MONTH, EVM_COMPUTE_1C4G_40GB_MONTH, EVM_COMPUTE_24C48G_20GB_MONTH, EVM_COMPUTE_24C48G_40GB_MONTH, EVM_COMPUTE_2C2G_40GB_MONTH,
		EVM_COMPUTE_2C4G_40GB_MONTH, EVM_COMPUTE_2C8G_40GB_MONTH, EVM_COMPUTE_32C64G_20GB_MONTH, EVM_COMPUTE_32C64G_40GB_MONTH, EVM_COMPUTE_4C16G_40GB_MONTH,
		EVM_COMPUTE_4C4G_40GB_MONTH, EVM_COMPUTE_4C8G_40GB_MONTH, EVM_COMPUTE_8C16G_40GB_MONTH, EVM_COMPUTE_8C32G_40GB_MONTH, EVM_COMPUTE_8C8G_40GB_MONTH,
		EVM_COMPUTE_12C12G_40GB_YEAR, EVM_COMPUTE_12C24G_40GB_YEAR, EVM_COMPUTE_12C48G_40GB_YEAR, EVM_COMPUTE_16C32G_40GB_YEAR, EVM_COMPUTE_16C64G_40GB_YEAR,
		EVM_COMPUTE_1C1G_40GB_YEAR, EVM_COMPUTE_1C2G_40GB_YEAR, EVM_COMPUTE_1C4G_40GB_YEAR, EVM_COMPUTE_24C48G_20GB_YEAR, EVM_COMPUTE_24C48G_40GB_YEAR,
		EVM_COMPUTE_2C2G_40GB_YEAR, EVM_COMPUTE_2C4G_40GB_YEAR, EVM_COMPUTE_2C8G_40GB_YEAR, EVM_COMPUTE_32C64G_20GB_YEAR, EVM_COMPUTE_32C64G_40GB_YEAR,
		EVM_COMPUTE_4C16G_40GB_YEAR, EVM_COMPUTE_4C4G_40GB_YEAR, EVM_COMPUTE_4C8G_40GB_YEAR, EVM_COMPUTE_8C16G_40GB_YEAR, EVM_COMPUTE_8C32G_40GB_YEAR, EVM_COMPUTE_8C8G_40GB_YEAR:
		return GROUP_EVM_COMPUTE
	case EVM_NETWORK_BANDWIDTH_1, EVM_NETWORK_BANDWIDTH_2, EVM_NETWORK_BANDWIDTH_3, EVM_NETWORK_BANDWIDTH_4, EVM_NETWORK_BANDWIDTH_5, EVM_NETWORK_BANDWIDTH_6,
		EVM_NETWORK_BANDWIDTH_1_MONTH, EVM_NETWORK_BANDWIDTH_2_MONTH, EVM_NETWORK_BANDWIDTH_3_MONTH, EVM_NETWORK_BANDWIDTH_4_MONTH, EVM_NETWORK_BANDWIDTH_5_MONTH, EVM_NETWORK_BANDWIDTH_6_MONTH,
		EVM_NETWORK_BANDWIDTH_1_YEAR, EVM_NETWORK_BANDWIDTH_2_YEAR, EVM_NETWORK_BANDWIDTH_3_YEAR, EVM_NETWORK_BANDWIDTH_4_YEAR, EVM_NETWORK_BANDWIDTH_5_YEAR, EVM_NETWORK_BANDWIDTH_6_YEAR:
		return GROUP_EVM_NETWORK
	case EVM_VOLUME_QUICK, EVM_VOLUME_QUICK_MONTH, EVM_VOLUME_QUICK_YEAR, EVM_VOLUME_CAPACIOUS, EVM_VOLUME_CAPACIOUS_MONTH, EVM_VOLUME_CAPACIOUS_YEAR:
		return GROUP_EVM_VOLUME
	case EVM_SNAPSHOT_VOLUME, EVM_SNAPSHOT_VOLUME_MONTH, EVM_SNAPSHOT_VOLUME_YEAR:
		return GROUP_EVM_SNAPSHOT
	case EVM_LISTENER_5K, EVM_LISTENER_10K, EVM_LISTENER_20K, EVM_LISTENER_40K:
		return GROUP_EVM_LISTENER
	case FUSION_TRANSFER_TINY, FUSION_TRANSFER_DOWN, FUSION_TRANSFER_VOD:
		return GROUP_FUSION_TRANSFER
	case PILI_TRANSFER_DOWN:
		return GROUP_PILI_TRANSFER
	}
	return GROUP_NIL
}

// productZonesMap 是产品线-生效区域映射表
var productZonesMap = map[Product][]zone.Zone{
	PRODUCT_KODO: {
		zone.ZONE_NB,
		zone.ZONE_BC,
		zone.ZONE_LAC,
		zone.ZONE_GZ,
		zone.ZONE_SG,
	},

	PRODUCT_FUSION: {
		zone.ZONE_FUSION_CHINA,
		zone.ZONE_FUSION_AMEU,
		zone.ZONE_FUSION_ASIA,
		zone.ZONE_FUSION_SEA,
		zone.ZONE_FUSION_SA,
		zone.ZONE_FUSION_OC,
		zone.ZONE_FUSION_FOREIGN,
		zone.ZONE_FUSION_NOZONE,
	},

	PRODUCT_PILI:         {zone.ZONE_NB},
	PRODUCT_DISTRIBUTION: {zone.ZONE_NB},
	PRODUCT_MPS:          {zone.ZONE_NB},
	PRODUCT_MARKET:       {zone.ZONE_NB},
	Product("jedi"):      {zone.ZONE_NB},
	Product("ufop2"):     {zone.ZONE_NB},
	Product("pandora"):   {zone.ZONE_NB},

	Product("kirk"): {
		zone.ZONE_KIRK_BQ,
		zone.ZONE_KIRK_GQ,
		zone.ZONE_KIRK_LAC,
		zone.ZONE_KIRK_NQ,
		zone.ZONE_KIRK_XQ,
	},

	Product("qvm"): {
		// 国内
		zone.ZONE_QVM_QD,
		zone.ZONE_QVM_BJ,
		zone.ZONE_QVM_ZJK,
		zone.ZONE_QVM_HHHT,
		zone.ZONE_QVM_HZ,
		zone.ZONE_QVM_SH,
		zone.ZONE_QVM_SZ,
		zone.ZONE_QVM_HK,
		// 海外
		zone.ZONE_QVM_SINGAPORE,
		zone.ZONE_QVM_SYDNEY,
		zone.ZONE_QVM_KL,
		zone.ZONE_QVM_JAKARTA,
		zone.ZONE_QVM_VIRGINIA,
		zone.ZONE_QVM_SV,
		zone.ZONE_QVM_FK,
		zone.ZONE_QVM_DUBAI,
		zone.ZONE_QVM_MUMBAI,
		zone.ZONE_QVM_TOKYO,
	},

	Product("ke"): {
		zone.ZONE_KE_XQ,
		zone.ZONE_KE_BQ,
		zone.ZONE_KE_JQ,
		zone.ZONE_KE_DQ,
	},

	PRODUCT_EVM: {zone.ZONE_NB},
}

// GetProductAvailableZones 查询指定产品线的生效区域
func GetProductAvailableZones(product Product) []zone.Zone {
	if zones, ok := productZonesMap[product]; ok {
		return zones
	}

	return []zone.Zone{}
}
